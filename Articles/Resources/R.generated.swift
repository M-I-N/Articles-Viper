//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap(Locale.init) ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)
  
  static func validate() throws {
    try intern.validate()
  }
  
  /// This `R.color` struct is generated, and contains static references to 0 colors.
  struct color {
    fileprivate init() {}
  }
  
  /// This `R.file` struct is generated, and contains static references to 0 files.
  struct file {
    fileprivate init() {}
  }
  
  /// This `R.font` struct is generated, and contains static references to 0 fonts.
  struct font {
    fileprivate init() {}
  }
  
  /// This `R.image` struct is generated, and contains static references to 2 images.
  struct image {
    /// Image `image-launch-screen`.
    static let imageLaunchScreen = Rswift.ImageResource(bundle: R.hostingBundle, name: "image-launch-screen")
    /// Image `image-placeholder`.
    static let imagePlaceholder = Rswift.ImageResource(bundle: R.hostingBundle, name: "image-placeholder")
    
    /// `UIImage(named: "image-launch-screen", bundle: ..., traitCollection: ...)`
    static func imageLaunchScreen(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.imageLaunchScreen, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "image-placeholder", bundle: ..., traitCollection: ...)`
    static func imagePlaceholder(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.imagePlaceholder, compatibleWith: traitCollection)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.nib` struct is generated, and contains static references to 1 nibs.
  struct nib {
    /// Nib `ArticleTableViewCell`.
    static let articleTableViewCell = _R.nib._ArticleTableViewCell()
    
    /// `UINib(name: "ArticleTableViewCell", in: bundle)`
    static func articleTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.articleTableViewCell)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.reuseIdentifier` struct is generated, and contains static references to 0 reuse identifiers.
  struct reuseIdentifier {
    fileprivate init() {}
  }
  
  /// This `R.segue` struct is generated, and contains static references to 0 view controllers.
  struct segue {
    fileprivate init() {}
  }
  
  /// This `R.storyboard` struct is generated, and contains static references to 3 storyboards.
  struct storyboard {
    /// Storyboard `ArticlesStoryboard`.
    static let articlesStoryboard = _R.storyboard.articlesStoryboard()
    /// Storyboard `DetailsStoryboard`.
    static let detailsStoryboard = _R.storyboard.detailsStoryboard()
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    
    /// `UIStoryboard(name: "ArticlesStoryboard", bundle: ...)`
    static func articlesStoryboard(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.articlesStoryboard)
    }
    
    /// `UIStoryboard(name: "DetailsStoryboard", bundle: ...)`
    static func detailsStoryboard(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.detailsStoryboard)
    }
    
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.string` struct is generated, and contains static references to 1 localization tables.
  struct string {
    /// This `R.string.localizable` struct is generated, and contains static references to 9 localization keys.
    struct localizable {
      /// Base translation: Author
      /// 
      /// Locales: Base
      static let alert_AUTHOR_OPTION = Rswift.StringResource(key: "ALERT_AUTHOR_OPTION", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: Cancel
      /// 
      /// Locales: Base
      static let alert_CANCEL_OPTION = Rswift.StringResource(key: "ALERT_CANCEL_OPTION", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: Date
      /// 
      /// Locales: Base
      static let alert_DATE_OPTION = Rswift.StringResource(key: "ALERT_DATE_OPTION", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: Details
      /// 
      /// Locales: Base
      static let details_NAVIGATION_BAR_TITLE = Rswift.StringResource(key: "DETAILS_NAVIGATION_BAR_TITLE", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: Feed
      /// 
      /// Locales: Base
      static let feed_NAVIGATION_BAR_TITLE = Rswift.StringResource(key: "FEED_NAVIGATION_BAR_TITLE", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: Sort
      /// 
      /// Locales: Base
      static let button_SORT_TITLE = Rswift.StringResource(key: "BUTTON_SORT_TITLE", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: Sort by
      /// 
      /// Locales: Base
      static let alert_SORT_BY_TITLE = Rswift.StringResource(key: "ALERT_SORT_BY_TITLE", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: Title
      /// 
      /// Locales: Base
      static let alert_TITLE_OPTION = Rswift.StringResource(key: "ALERT_TITLE_OPTION", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: Website
      /// 
      /// Locales: Base
      static let alert_WEBSITE_OPTION = Rswift.StringResource(key: "ALERT_WEBSITE_OPTION", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      
      /// Base translation: Author
      /// 
      /// Locales: Base
      static func alert_AUTHOR_OPTION(_: Void = ()) -> String {
        return NSLocalizedString("ALERT_AUTHOR_OPTION", bundle: R.hostingBundle, value: "Author", comment: "")
      }
      
      /// Base translation: Cancel
      /// 
      /// Locales: Base
      static func alert_CANCEL_OPTION(_: Void = ()) -> String {
        return NSLocalizedString("ALERT_CANCEL_OPTION", bundle: R.hostingBundle, value: "Cancel", comment: "")
      }
      
      /// Base translation: Date
      /// 
      /// Locales: Base
      static func alert_DATE_OPTION(_: Void = ()) -> String {
        return NSLocalizedString("ALERT_DATE_OPTION", bundle: R.hostingBundle, value: "Date", comment: "")
      }
      
      /// Base translation: Details
      /// 
      /// Locales: Base
      static func details_NAVIGATION_BAR_TITLE(_: Void = ()) -> String {
        return NSLocalizedString("DETAILS_NAVIGATION_BAR_TITLE", bundle: R.hostingBundle, value: "Details", comment: "")
      }
      
      /// Base translation: Feed
      /// 
      /// Locales: Base
      static func feed_NAVIGATION_BAR_TITLE(_: Void = ()) -> String {
        return NSLocalizedString("FEED_NAVIGATION_BAR_TITLE", bundle: R.hostingBundle, value: "Feed", comment: "")
      }
      
      /// Base translation: Sort
      /// 
      /// Locales: Base
      static func button_SORT_TITLE(_: Void = ()) -> String {
        return NSLocalizedString("BUTTON_SORT_TITLE", bundle: R.hostingBundle, value: "Sort", comment: "")
      }
      
      /// Base translation: Sort by
      /// 
      /// Locales: Base
      static func alert_SORT_BY_TITLE(_: Void = ()) -> String {
        return NSLocalizedString("ALERT_SORT_BY_TITLE", bundle: R.hostingBundle, value: "Sort by", comment: "")
      }
      
      /// Base translation: Title
      /// 
      /// Locales: Base
      static func alert_TITLE_OPTION(_: Void = ()) -> String {
        return NSLocalizedString("ALERT_TITLE_OPTION", bundle: R.hostingBundle, value: "Title", comment: "")
      }
      
      /// Base translation: Website
      /// 
      /// Locales: Base
      static func alert_WEBSITE_OPTION(_: Void = ()) -> String {
        return NSLocalizedString("ALERT_WEBSITE_OPTION", bundle: R.hostingBundle, value: "Website", comment: "")
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }
    
    fileprivate init() {}
  }
  
  fileprivate class Class {}
  
  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    try storyboard.validate()
  }
  
  struct nib {
    struct _ArticleTableViewCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "ArticleTableViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> ArticleTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ArticleTableViewCell
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      try launchScreen.validate()
      try articlesStoryboard.validate()
      try detailsStoryboard.validate()
    }
    
    struct articlesStoryboard: Rswift.StoryboardResourceType, Rswift.Validatable {
      let articlesViewController = StoryboardViewControllerResource<ArticlesViewController>(identifier: "ArticlesViewController")
      let bundle = R.hostingBundle
      let name = "ArticlesStoryboard"
      
      func articlesViewController(_: Void = ()) -> ArticlesViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: articlesViewController)
      }
      
      static func validate() throws {
        if _R.storyboard.articlesStoryboard().articlesViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'articlesViewController' could not be loaded from storyboard 'ArticlesStoryboard' as 'ArticlesViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct detailsStoryboard: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let detailsViewController = StoryboardViewControllerResource<DetailsViewController>(identifier: "DetailsViewController")
      let name = "DetailsStoryboard"
      
      func detailsViewController(_: Void = ()) -> DetailsViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: detailsViewController)
      }
      
      static func validate() throws {
        if _R.storyboard.detailsStoryboard().detailsViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'detailsViewController' could not be loaded from storyboard 'DetailsStoryboard' as 'DetailsViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UIViewController
      
      let bundle = R.hostingBundle
      let name = "LaunchScreen"
      
      static func validate() throws {
        if UIKit.UIImage(named: "image-launch-screen") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'image-launch-screen' is used in storyboard 'LaunchScreen', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate init() {}
}
